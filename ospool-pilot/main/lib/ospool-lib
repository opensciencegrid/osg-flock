#!/bin/bash
#
# This script is script sources from multiple other scripts.
# Only put functions in here
#
# Assumptions: "glidein_config" has been defined already
#

function info {
    echo "INFO  $*" 1>&2
}

function my_warn {
    echo "WARN   $*" 1>&2
    export GLIDEIN_VALIDATION_WARNINGS="$@. $GLIDEIN_VALIDATION_WARNINGS"
}

function advertise {
    # atype is the type of the value as defined by GlideinWMS:
    #   I - integer
    #   S - quoted string
    #   C - unquoted string (i.e. Condor keyword or expression)
    key="$1"
    value="$2"
    atype="$3"

    if [ "$glidein_config" != "NONE" ]; then
        add_config_line_safe $key "$value"
        add_condor_vars_line $key "$atype" "-" "+" "Y" "Y" "-"
    fi

    if [ "$atype" = "S" ]; then
        echo "$key = \"$value\""
    else
        echo "$key = $value"
    fi
}

function check_singularity_overunderlay {
    # some sites have broken singularity overlay/underlay
    # test this by trying to bind pwd to a nonexistent directory
    # in the container
    local has_singularity=$(get_glidein_config_value HAS_SINGULARITY)
    local singularity_path=$(get_glidein_config_value GWMS_SINGULARITY_PATH)
    local default_image=$(get_glidein_config_value SINGULARITY_IMAGES_DICT | sed 's/^default://')

    if [ "x$default_image" = "x" ]; then
        default_image="/cvmfs/singularity.opensciencegrid.org/opensciencegrid/osgvo-el8:latest/"
    fi

    # singularity is a prereq
    if [[ $has_singularity != "True" ]]; then
        return 0
    fi

    output=$(timeout 60s $singularity_path run -B $PWD:/doesnotexist $default_image /bin/true 2>&1)
    ret=$?

    if [[ $ret != 0 ]]; then
        # DEBUGGING
        info "Error testing for overlay/underlay; output:"
        info "$output"
        return $ret
    else
        return 0
    fi
}

function check_singularity_overrides {
    GLIDEIN_Entry_Name=$(get_glidein_config_value GLIDEIN_Entry_Name)
    GLIDEIN_Site=$(get_glidein_config_value GLIDEIN_Site)
    # AMNH-HEL - Singularity causes zombie process
    # (https://support.opensciencegrid.org/a/tickets/69708)
    if (echo "$GLIDEIN_Entry_Name" | egrep -i "AMNH-HEL") >/dev/null 2>&1; then
        advertise HAS_SINGULARITY "False" "C"
        advertise SINGULARITY_COMMENT "Disabled due to zombie process problem" "S"
    fi
    if (echo "$GLIDEIN_Site" | egrep -i "SDSC-PRP") >/dev/null 2>&1; then
        advertise HAS_SINGULARITY "False" "C"
        advertise SINGULARITY_COMMENT "Disabled due to singularity setup" "S"
    fi
}

function osdf_download {
    # Use stashcp to download a sif file; if the destination does not end in .sif, unpack the sif into the sandbox format
    local dest="$1"
    local src="$2"

    local dest_sif="${dest%.sif}.sif"
    local client_dir=$(get_glidein_config_value GLIDECLIENT_WORK_DIR)

    if [ -e $client_dir/stashcp ]; then
        rm -rf "$dest" \
            && $client_dir/stashcp "$src" "$dest_sif"
        ret=$?
    else
        warn "stashcp is not available"
        return 255
    fi

    if [[ $ret != 0 ]]; then
        # delete on incomplete download
        rm -f "$dest_sif"
        return $ret
    fi

    if [[ "$dest_sif" != "$dest" ]]; then
        $GWMS_SINGULARITY_PATH build --force --sandbox "$dest" "$dest_sif"
        ret=$?
        rm -f "$dest_sif"
        return $ret
    fi
}

function http_download {
    # Use curl/wget to download a sif file; if the destination does not end in .sif, unpack the sif into the sandbox format
    local dest="$1"
    local src="$2"

    local dest_sif="${dest%.sif}.sif"

    if command -v curl >/dev/null 2>&1; then
        curl --silent --verbose --show-error --fail --location --connect-timeout 30 --speed-limit 1024 -o "$dest_sif" "$src"
        ret=$?
    elif command -v wget >/dev/null 2>&1; then
        wget -nv --timeout=30 --tries=1 -O "$dest_sif" "$src"
        ret=$?
    else
        warn "Neither curl nor wget are available"
        return 255
    fi
    if [[ $ret != 0 ]]; then
        # delete on incomplete download
        rm -f "$dest_sif"
        return $ret
    fi

    if [[ "$dest_sif" != "$dest" ]]; then
        $GWMS_SINGULARITY_PATH build --force --sandbox "$dest" "$dest_sif"
        ret=$?
        rm -f "$dest_sif"
        return $ret
    fi
}


function check_singularity_sif_support {
    # Return 0 if singularity can directly run a .sif file without having to
    # unpack it into a temporary sandbox first, nonzero otherwise.
    #
    # We know this needs setuid Singularity configured to allow loopback
    # devices but there may be other conditions so just test it directly.

    # Grab an alpine image from somewhere; ok to download each time since
    # it's like 3 megs
    local cvmfs_alpine="/cvmfs/oasis.opensciencegrid.org/osg/projects/OSG-Staff/images/library__alpine__latest.sif"
    local static_registry_alpine="docker://ospool-static-registry.osg.chtc.io/alpine:latest"
    local sylabs_alpine="library://alpine:3"
    local work_dir=$(get_glidein_config_value GLIDEIN_WORK_DIR)
    local image_dir="$work_dir/../images"
    local has_singularity=$(get_glidein_config_value HAS_SINGULARITY)
    local singularity_path=$(get_glidein_config_value GWMS_SINGULARITY_PATH)

    # do not allow .sif images on 3.x kernels (OSPOOL-18)
    if (uname -r | egrep '^3\.') >/dev/null 2>&1; then
        return 1
    fi

    # allow this to run before gwms has determined which singularity to use
    if [[ $has_singularity = "" ]]; then
        has_singularity="True"
        singularity_path=singularity
    fi

    # singularity is a prereq
    if [[ $has_singularity != "True" ]]; then
        return 1
    fi

    # only download once
    if [ ! -e $image_dir/gwms-alpine.sif.log ]; then
        (cp "$cvmfs_alpine" $image_dir/gwms-alpine.sif ||
             timeout 60s $singularity_path pull --force $image_dir/gwms-alpine.sif "$static_registry_alpine" ||
             timeout 60s $singularity_path pull --force $image_dir/gwms-alpine.sif "$sylabs_alpine" ||
             my_warn "All sources failed - could not create gwms-alpine.sif"
        ) &> $image_dir/gwms-alpine.sif.log; ret=$?
    fi

    # did the download fail
    if [ ! -e $image_dir/gwms-alpine.sif ]; then
        return 1
    fi

    output=$(timeout 60s $singularity_path run $image_dir/gwms-alpine.sif /bin/true 2>&1)
    ret=$?

    if [[ $ret != 0 ]]; then
        # DEBUGGING
        info "Error testing for SIF support; output:"
        info "$output"
        return $ret
    elif grep -q "temporary sandbox" <<< "$output"; then
        info "Using a SIF created a temporary sandbox"
        return 1
    else
        return 0
    fi
}

function check_singularity_registry_support {
    # Return 0 if singularity can directly run a registry image without having to
    # unpack it into a temporary sandbox first, nonzero otherwise.
    # This also tests building a SIF from a registry image
    #
    local static_registry_alpine="docker://ospool-static-registry.osg.chtc.io/alpine:latest"
    local has_singularity=$(get_glidein_config_value HAS_SINGULARITY)
    local singularity_path=$(get_glidein_config_value GWMS_SINGULARITY_PATH)

    # singularity is a prereq
    if [[ $has_singularity != "True" ]]; then
        return 1
    fi

    output=$(timeout 60s $singularity_path run --disable-cache $static_registry_alpine /bin/true 2>&1)
    ret=$?

    if [[ $ret != 0 ]]; then
        # DEBUGGING
        info "Error testing for registry support; output:"
        info "$output"
        return $ret
    elif grep -q "temporary sandbox" <<< "$output"; then
        info "Using a registry created a temporary sandbox"
        return 1
    else
        return 0
    fi
}

