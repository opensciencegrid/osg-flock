#!/bin/bash

glidein_config="$1"

function info {
    echo "INFO  " "$@" 1>&2
}

function warn {
    echo "WARN  " "$@" 1>&2
}

function advertise {
    # atype is the type of the value as defined by GlideinWMS:
    #   I - integer
    #   S - quoted string
    #   C - unquoted string (i.e. Condor keyword or expression)
    key="$1"
    value="$2"
    atype="$3"

    if [ "$glidein_config" != "NONE" ]; then
        gconfig_add_safe "$key" "$value"
        add_condor_vars_line "$key" "$atype" "-" "+" "Y" "Y" "-"
    fi

    if [ "$atype" = "S" ]; then
        echo "$key = \"$value\""
    else
        echo "$key = $value"
    fi
}


###########################################################
# import gconfig_add and add_condor_vars_line functions

add_config_line_source=`grep '^ADD_CONFIG_LINE_SOURCE ' $glidein_config | awk '{print $2}'`
source $add_config_line_source

if [[ $GLIDEIN_Site ]]; then
    glidein_site=$GLIDEIN_Site
else
    glidein_site=$(gconfig_get "GLIDEIN_Site")
fi

set_condor_knob () {
    # Sets the value of a config knob in the condor config;
    # does not export it as a startd attribute, nor does it export it to the job environment
    # Reference: https://glideinwms.fnal.gov/doc.prd/factory/custom_vars.html
    local name value
    name=$1
    value=$2
    gconfig_add "$name" "$value"
    add_condor_vars_line "$name" \
        "C" `# unquoted string (i.e. HTCondor keyword or expression)` \
        "-" `# no default value` \
        "+" `# also use $name for the name of the config knob` \
        "N" `# a value is not required for this attribute` \
        "N" `# do not have the startd publish this to the collector` \
        "-" `# do not export to the user job environment`
}


condor_vars_file=$(gconfig_get CONDOR_VARS_FILE)

# DEBUG will be advertised in the slot ad is nonempty; use add_to_debug() to add to it
DEBUG=""
add_to_debug () {
    [[ $DEBUG ]] && DEBUG="${DEBUG}; "
    DEBUG="${DEBUG}$(printf "%q " "$@")"
}

###########################################################
# write custom configs to condor_config.d/...
config_d_dir=$(gconfig_get GLIDEIN_WORK_DIR)/../condor_config.d

# memory/disk/... policies
cat >"$config_d_dir/50-resource-policy.conf" <<EOF
use policy:Hold_If_Memory_Exceeded
use policy:Hold_If_Disk_Exceeded
EOF


###########################################################
# CVMFS_BASE defaults to /cvmfs but can be overridden in case of for example cvmfsexec
if [[ ! $CVMFS_BASE ]]; then
    CVMFS_BASE="/cvmfs"
fi

# enable job duration and busy stats
gconfig_add STATISTICS_TO_PUBLISH_LIST "JobDuration, JobBusyTime"
add_condor_vars_line STATISTICS_TO_PUBLISH_LIST "C" "-" "+" "N" "N" "-"

# black holes, oh my (https://opensciencegrid.atlassian.net/browse/OSPOOL-3)
# 6/20/25 - Many false positives - disabled after email discussion
gconfig_add IsBlackHole "False"
add_condor_vars_line IsBlackHole "C" "-" "+" "N" "Y" "-"

# excessive load, probably due to swapping (https://opensciencegrid.atlassian.net/browse/OSPOOL-2)
# 6/17/25 - DetectedCpus was not reliable in partial-node glideins - disabled
gconfig_add HasExcessiveLoad "False"
add_condor_vars_line HasExcessiveLoad "C" "-" "+" "N" "Y" "-"

# On GPU resources, allow CPU-only jobs to run, but reserve resources for GPU jobs
# Consider the 3 slot types: Static, Partitionable, Dynamic
# Make sure we can still match the dynamic slot after it has been created
gconfig_add RoomForCPUOnlyJobs "(GPUs is Undefined) || (GPUs == 0) || ((SlotType == \"Partitionable\") && (CPUs > 8 * GPUs) && (Memory > 32000 * GPUs) && (Disk > 5000000 * GPUs))"
add_condor_vars_line RoomForCPUOnlyJobs "C" "-" "+" "N" "Y" "-"

# out of disk space (https://opensciencegrid.atlassian.net/browse/OSPOOL-4)
# note: Unlike DISK, RESERVED_DISK is in megabytes.
# As of July 2022, the HTCondor manual incorrectly states this is in kilobytes.
# This change was verified by examining the code.
if [[ ! $IS_CONTAINER_PILOT ]]; then
    # Not currently used in container pilots
    gconfig_add RESERVED_DISK "3000"
    add_condor_vars_line RESERVED_DISK "C" "-" "+" "N" "N" "-"
fi  # ! $IS_CONTAINER_PILOT

# use df and allocated cores to determine disk allocation (https://opensciencegrid.atlassian.net/browse/OSPOOL-5)
# but only if we think we are not "whole node"
if [[ ! $IS_CONTAINER_PILOT ]]; then
    # This logic is currently not used in container pilots
    GLIDEIN_DISK=$(gconfig_get GLIDEIN_DISK)
    if [ "x$GLIDEIN_DISK" = "x" ]; then
        allocated_cpus=$(gconfig_get GLIDEIN_CPUS)
        total_cpus=$(cat /proc/cpuinfo | egrep "^processor" | wc -l)
        if [[ $allocated_cpus -gt 0 && $total_cpus -gt 0 ]]; then
            # the bash [ and [[ operators don't accept floating point so we must
            # use integer math
            allocated_disk=$((100 * $allocated_cpus / $total_cpus))
            if [ "x$allocated_disk" = "x" ]; then
                allocated_disk=1
            fi
            # small slots on large machines, make sure we get at least 1%
            if [[ $allocated_disk -lt 1 ]]; then
                allocated_disk=1
            fi
            gconfig_add GLIDEIN_DISK "$allocated_disk%"
            add_condor_vars_line GLIDEIN_DISK "C" "-" "+" "N" "N" "-"
        fi
    fi
fi  # ! $IS_CONTAINER_PILOT


set_condor_knob STARTD_JOB_ATTRS '$(STARTD_JOB_ATTRS) ProjectName'


###########################################################
# NAT setups may have an idle timeout where they silently
# drop/forget a connection if they haven't seen packets go
# through.  Send heartbeats more frequently to avoid this.
gconfig_add CCB_HEARTBEAT_INTERVAL "120"
add_condor_vars_line CCB_HEARTBEAT_INTERVAL "C" "-" "+" "N" "N" "-"


###########################################################
# debugging GSI
#gconfig_add MASTER_DEBUG "D_SECURITY:2"
#add_condor_vars_line MASTER_DEBUG "C" "-" "+" "N" "N" "-"
#gconfig_add STARTD_DEBUG "D_SECURITY:2"
#add_condor_vars_line STARTD_DEBUG "C" "-" "+" "N" "N" "-"
#gconfig_add STARTER_DEBUG "D_SECURITY:2"
#add_condor_vars_line STARTER_DEBUG "C" "-" "+" "N" "N" "-"


## Enable this to have the Pelican-based Stash/OSDF plugin and stashcp fall back
## to the pre-7.5.0 behavior of using Topology instead of the director.
## (STASH_USE_TOPOLOGY is blank or non-blank)
#export STASH_USE_TOPOLOGY=1
#gconfig_add STASH_USE_TOPOLOGY "$STASH_USE_TOPOLOGY"
#add_condor_vars_line STASH_USE_TOPOLOGY "C" "-" "+" "N" "Y" "+"

OSDF_FAIL_REASON=""
osdf_plugin_is_ok () {
    # Performs tests on the Stash/OSDF plugin passed as an argument.
    # Sets $OSDF_FAIL_REASON for a human-readable failure reason, or "" on success.

    local OSDF_PLUGIN STASHCP_DEBUG STASHCP_TEST_FILE TIME TIMEOUT
    OSDF_PLUGIN="$1"
    STASHCP_DEBUG="-d"
    STASHCP_TEST_FILE="osdf:///ospool/uc-shared/public/OSG-Staff/validation/test.txt"

    TIMEOUT=$(which timeout 2>/dev/null)
    if [ "x$TIMEOUT" != "x" ]; then
        TIMEOUT="$TIMEOUT 120s"
    fi

    # The bash builtin time is no good because it pollutes
    # stderr with hardcoded real, sys, and user lines.
    TIME=$(which time 2>/dev/null)
    if [ "x$TIME" != "x" ]; then
        # Without --quiet, newer versions of TIME(1)
        # will prepend an extra line to the output
        # if the process exits with a non-zero exit code.
        # Therefore, we use $(tail -1 stashcp-test.time)
        # below to get the runtime of stashcp.
        TIME="$TIME --output=stashcp-test.time --format=%e"
    fi

    # also run a simple test (TODO: make this IGWN-specific)
    rm -f stashcp-test.file
    info "Testing $OSDF_PLUGIN $STASHCP_DEBUG $STASHCP_TEST_FILE..."
    # temporary extra test until /ospool/uc-shared/public is fully up
    if ($TIME $TIMEOUT $OSDF_PLUGIN $STASHCP_DEBUG $STASHCP_TEST_FILE stashcp-test.file) >> stashcp-test.log 2>&1; then
        if [ -f stashcp-test.time ]; then
            info "Succeeded (in $(tail -1 stashcp-test.time)s)!"
        else
            info "Succeeded!"
        fi

        OSDF_PLUGIN_VERSION=$("$OSDF_PLUGIN" -classad | awk '/^(Pelican)?PluginVersion / { print $3; exit }' | tr -d '"' 2>>stashcp-test.log)
        if [[ $OSDF_PLUGIN_VERSION ]]; then
            OSDF_FAIL_REASON=""
        else
            # So close!
            OSDF_FAIL_REASON="Failure getting plugin version!"
        fi

        # 7.11.0 is the minimal version we want to use
        if [ "x$OSDF_FAIL_REASON" = "x" ]; then
            if ! (printf '%s\n%s\n' "7.11.0" "$OSDF_PLUGIN_VERSION" | sort --check=quiet --version-sort); then
                OSDF_FAIL_REASON="Plugin is too old ($OSDF_PLUGIN_VERSION)."
            fi
        fi
    else
        if [ "$?" -eq "124" ]; then
            OSDF_FAIL_REASON="Failed (timed out after 120s)!"
        elif [ -f stashcp-test.time ]; then
            OSDF_FAIL_REASON="Failed (in $(tail -1 stashcp-test.time)s)!"
        else
            OSDF_FAIL_REASON="Failed for other reason!"
        fi
    fi

    if [[ $OSDF_FAIL_REASON ]]; then
        warn "$OSDF_FAIL_REASON stashcp output:"
        while read line; do warn "$line"; done < stashcp-test.log
        return 1
    fi
}

download_and_extract_pelican () {
    # Download and extract a downloaded Pelican tarball from the given URL and
    # rename the binary to stash_plugin so we can install it as a condor FT
    # plugin.
    local url="$1"

    mkdir -p pelican-tmp/ &&
    curl -LSso pelican-tmp/pelican.tar.gz "$url" &&
    tar -C pelican-tmp/ -xzf pelican-tmp/pelican.tar.gz &&
    (mv -f pelican-tmp/pelican-*/pelican ./stash_plugin || mv -f pelican-tmp/pelican ./stash_plugin) &&
    chmod +x stash_plugin
}


# In a factory pilot, at the time this script is invoked, the Condor
# installation will be in a directory like
#       main/condor/
if [[ $IS_CONTAINER_PILOT ]]; then
    CONDOR_DIR=/usr
    REAL_CONDOR_DIR=/usr
    CONDOR_LIBEXEC=/usr/libexec/condor
else
    CONDOR_DIR=$(gconfig_get CONDOR_DIR)
    # shellcheck disable=SC2086
    REAL_CONDOR_DIR=$(echo $CONDOR_DIR/condor-*/usr)
    # ^^ the "echo" is needed to expand the glob
    CONDOR_LIBEXEC=$CONDOR_DIR/libexec
fi


condor_version_pattern='CondorVersion:\ ([0-9]+)\.([0-9]+)\.([0-9]+)'
# Get and parse condor version so we can add version-specific knobs.
# If we were to have full control over the condor config, we could use an
# `if` construct, but in a factory pilot we need to put everything into the
# glidein config, which doesn't support that syntax.
pilot_condor_version_raw=$("$REAL_CONDOR_DIR/bin/condor_version" | head -n 1)
if [[ $pilot_condor_version_raw =~ $condor_version_pattern ]]; then
    # zero-pad the version numbers so we can sort it as a string
    pilot_condor_version=$(printf "%02d.%02d.%02d" "${BASH_REMATCH[1]}" "${BASH_REMATCH[2]}" "${BASH_REMATCH[3]}")
else
    warn "Unable to figure out condor_version"
    pilot_condor_version="00.00.00"
fi


#
# CGroup management for Condor-in-Condor (OSPOOL-150)
#
# The feature requires:
# 1. Condor 24.8.0 on the pilot
# 2. Condor 24.8.0 on the host (host batch system must be Condor)
# 3. cgroups v2
#
host_condor_version=00.00.00
if [[ -f $_CONDOR_MACHINE_AD ]]; then
    host_condor_version_raw=$(\
        awk -F' = ' '/^CondorVersion / { print $2; exit }' "$_CONDOR_MACHINE_AD" 2>/dev/null \
        | tr -d '"')
    if [[ $host_condor_version_raw =~ $condor_version_pattern ]]; then
        # zero-pad the version numbers so we can sort it as a string
        host_condor_version=$(printf "%02d.%02d.%02d" "${BASH_REMATCH[1]}" "${BASH_REMATCH[2]}" "${BASH_REMATCH[3]}")
    fi
fi


# Using > because >= doesn't exist in bash
if [[ $pilot_condor_version > "24.07.99" ]] && \
    [[ $host_condor_version > "24.07.99" ]] && \
    [[ $(stat -fc %T /sys/fs/cgroup/ 2>/dev/null) == "cgroup2fs" ]]
then
    set_condor_knob CREATE_CGROUP_WITHOUT_ROOT 'true'
    advertise HAS_UNPRIVILEGED_CGROUPS true C
else
    advertise HAS_UNPRIVILEGED_CGROUPS false C
fi



# set_condor_knob REDIRECT_FILETRANSFER_PLUGIN_STDERR_TO_STDOUT 'TRUE'
# set_condor_knob LOG_FILETRANSFER_PLUGIN_STDOUT_ON_FAILURE 'D_ALWAYS'
# ^^ apparently these two are already the default
set_condor_knob LOG_FILETRANSFER_PLUGIN_STDOUT_ON_SUCCESS 'D_ALWAYS'

# Allow downloading Pelican by setting DOWNLOAD_PELICAN_VERSION in the
# environment.  If set to an X.Y.Z string with a matching vX.Y.Z tag in GitHub,
# it will download the Pelican binary from the release artifacts of that tag.
#
# If set to "condor", it will use what's in the Condor tarball.  (This can be
# used to override a non-Condor default.)
# Handle itb and production differently
GLIDECLIENT_Group=$(gconfig_get GLIDECLIENT_Group)
if (echo "$GLIDECLIENT_Group" | grep itb) >/dev/null 2>&1; then
    # ITB
    # Have these two be different to test two versions in parallel
    if (( RANDOM % 2 == 0 )); then
        DEFAULT_DOWNLOAD_PELICAN_VERSION=7.20.2-rc.0
    else
        DEFAULT_DOWNLOAD_PELICAN_VERSION=7.20.2-rc.0
    fi
else
    # Production
    DEFAULT_DOWNLOAD_PELICAN_VERSION=condor
fi

if [[ ! $DOWNLOAD_PELICAN_VERSION ]]; then
    DOWNLOAD_PELICAN_VERSION=$(gconfig_get DOWNLOAD_PELICAN_VERSION)
    if [[ ! $DOWNLOAD_PELICAN_VERSION ]]; then
        DOWNLOAD_PELICAN_VERSION=$DEFAULT_DOWNLOAD_PELICAN_VERSION
    fi
fi


###########################################################
# Test and add the stash/osdf plugin
# It comes with condor, or we might be asked to download it.

# Find the Stash/OSDF plugin; set OSDF_PLUGIN to its current location.
# The plugin will be tested later.
if [[ $DOWNLOAD_PELICAN_VERSION && $DOWNLOAD_PELICAN_VERSION != condor ]]; then
    # If this variable is set, and not set to "condor", download that
    # version of Pelican and ignore the version from the HTCondor tarball.

    pelican_arch=$(arch)
    if [[ $pelican_arch == aarch64 ]]; then
        pelican_arch=arm64
    fi
    url=https://github.com/PelicanPlatform/pelican/releases/download/v${DOWNLOAD_PELICAN_VERSION}/pelican_Linux_${pelican_arch}.tar.gz
    # Pelican >= v7.9.0 tarballs will have the binary in a subdirectory of the
    # tarball; < 7.9.0 have it at the top level.
    _out=$(download_and_extract_pelican "$url" 2>&1); ret=$?
    if [[ $ret != 0 || ! -f stash_plugin || ! -x stash_plugin ]]; then
        OSDF_FAIL_REASON="Couldn't download and install requested Pelican version ($DOWNLOAD_PELICAN_VERSION)"
        add_to_debug "Pelican install output: $_out"
    else
        OSDF_PLUGIN=$(pwd -P)/stash_plugin
        advertise "DOWNLOAD_PELICAN_VERSION" "$DOWNLOAD_PELICAN_VERSION" "S"
    fi
    rm -rf "pelican-tmp/" &>/dev/null
else
    # Not asked to download a specific Pelican version, or specifically
    # asked to use what's in the HTCondor tarball.
    # Find the stash/osdf plugin in the HTCondor installation.
    if [[ -x $CONDOR_LIBEXEC/osdf_plugin ]]; then
        # forward compat
        OSDF_PLUGIN=$CONDOR_LIBEXEC/osdf_plugin
    elif [[ -x $CONDOR_LIBEXEC/stash_plugin ]]; then
        OSDF_PLUGIN=$CONDOR_LIBEXEC/stash_plugin
    else
        OSDF_FAIL_REASON="Stash/OSDF plugin not found in pilot's condor install"
    fi
fi

# Check if the site is excluded, and if not, test the plugin
if [[ $OSDF_PLUGIN ]]; then

    # Check if the site is in pelican-exceptions.csv - the file will be placed
    # in some gwms group specific directory, so search for it
    PCSV=$(find . -name pelican-exceptions.csv 2>/dev/null | head -n1)
    if [[ $PCSV != "" ]]; then
        info "Found exceptions file in $PCSV"
        while IFS=, read -r site block_percent reason; do
            [[ $site =~ ^# ]] && continue  # Skip comments
            if [[ "$glidein_site" == "$site" ]]; then
                # roll is a random number between 1 and 100 - compare this
                # with the provided block percentage (for example, if we roll
                # a 73 on a site with 90%, that will result in a block)
                roll=$(($RANDOM % 100 + 1))
                if [ $roll -le $block_percent ]; then
                    OSDF_FAIL_REASON="OSDF suspended at $site ($block_percent%): $reason"
                    break
                fi
            fi
        done < $PCSV
    fi

    # If the site is not in the exceptions list, test the plugin
    if [[ ! $OSDF_FAIL_REASON ]]; then
        if osdf_plugin_is_ok "$OSDF_PLUGIN"; then
            # osdf_plugin_is_ok sets $OSDF_FAIL_REASON
            gconfig_add FILETRANSFER_PLUGINS "\$(FILETRANSFER_PLUGINS),$OSDF_PLUGIN"
            add_condor_vars_line FILETRANSFER_PLUGINS "C" "-" "+" "N" "N" "-"
            set_condor_knob STASH_PLUGIN "$OSDF_PLUGIN"
            set_condor_knob OSDF_PLUGIN "$OSDF_PLUGIN"
        fi
    fi
fi

if [[ $OSDF_FAIL_REASON ]]; then
    advertise "OSDF_FAIL_REASON" "$OSDF_FAIL_REASON" "S"
    # Turn off the condor config's STASH_PLUGIN and OSDF_PLUGIN in case they're set
    set_condor_knob STASH_PLUGIN "/bin/false"
    set_condor_knob OSDF_PLUGIN "/bin/false"
fi




##################################################################
# Generate a minimal `STARTER_JOB_ENVIRONMENT`, mostly composed of
# informational variables that are considered safe to always leak to
# the job environment.
#
# Source of OSG_* variables:
#   https://github.com/opensciencegrid/osg-configure/blob/dcd02313500cf113e8a6c27571197b4803295774/scripts/osg-configure#L27
# Removed the following ones that don't appear actively used anymore:
#  OSG_GRID, OSG_APP, OSG_DATA, OSG_SITE_READ, OSG_SITE_WRITE
# Removed $OSG_WN_TMP because any job should use the HTCondor-provided scratch dir.
# Considered and not passed through:
#   LANG
info "Calculating default job environment variables."

if [[ -z $OSG_SITE_NAME ]]; then
    OSG_SITE_NAME=$glidein_site
fi

for envvar in \
     OSG_SITE_NAME \
     OSG_HOSTNAME \
     OSG_SQUID_LOCATION \
     http_proxy \
     https_proxy \
     FTP_PROXY \
; do

if [ ! -z ${!envvar+x} ]; then
  gconfig_add "${envvar}" "${!envvar}"
  add_condor_vars_line "${envvar}" "C" "-" "${envvar}" "N" "N" "+"
fi

done


###########################################################
# Find available volumes and set up bind mounts for Singularity jobs
GLIDEIN_SINGULARITY_BINDPATH=$(gconfig_get GLIDEIN_SINGULARITY_BINDPATH)
SINGULARITY_BIND_EXPR="/etc/hosts,/etc/localtime"
OLDIFS=$IFS
IFS=' ,'
# shellcheck disable=SC2086
for mntpoint in $GLIDEIN_SINGULARITY_BINDPATH "${CVMFS_BASE}:/cvmfs:ro" /etc/OpenCL/vendors; do
    info "Checking Singularity bind $mntpoint"
    # If we have a source:destination:flags type of bind, just test the source
    mntsource=$(echo "$mntpoint" | cut -d: -f1)
    if [[ -d $mntsource ]]; then
        info "$mntsource found and is a directory; adding to SINGULARITY_BIND_EXPR"
        # but put the whole bind in SINGULARITY_BIND_EXPR
        SINGULARITY_BIND_EXPR="${SINGULARITY_BIND_EXPR},${mntpoint}"
    else
        info "$mntsource not found or not a directory; ignoring"
    fi
done
IFS=$OLDIFS
unset OLDIFS
set_condor_knob "SINGULARITY_BIND_EXPR" "\"${SINGULARITY_BIND_EXPR}\""
info "SINGULARITY_BIND_EXPR is \"${SINGULARITY_BIND_EXPR}\""

# Glideinwms used /srv as the scratch directory, we should do the same
set_condor_knob "SINGULARITY_TARGET_DIR" '/srv'
set_condor_knob "SINGULARITY_EXTRA_ARGUMENTS" '"--home $_CONDOR_SCRATCH_DIR:/srv"'

# Have Condor handle using a "default" image
set_condor_knob "SINGULARITY_IMAGE_EXPR" '((ContainerImage ?: SingularityImage) ?: OSG_DEFAULT_SINGULARITY_IMAGE)'

# Run all jobs in singularity if we have it
# special case - allow some OSG staff to bypass Singularity for
# debugging and building images
set_condor_knob "SINGULARITY_JOB" "(HAS_SINGULARITY?:false) && !(container_bypass =?= True && stringListIMember(ProjectName, \"OSG-Staff,Caltech_2024_Reitze\"))"

# Condor PID namespace autodetection is broken (TODO add ticket); hard-disable it if we were asked to.
# I could consolidate these if statements but I'm curious where it's set...
if [[ $SINGULARITY_DISABLE_PID_NAMESPACES == 1 ]]; then
    info "SINGULARITY_DISABLE_PID_NAMESPACES is set in the environment; disabling PID namespaces"
    set_condor_knob "SINGULARITY_USE_PID_NAMESPACES" "false"
elif [[ $(gconfig_get "SINGULARITY_DISABLE_PID_NAMESPACES") == 1 ]]; then
    info "SINGULARITY_DISABLE_PID_NAMESPACES is set in glidein config; disabling PID namespaces"
    set_condor_knob "SINGULARITY_USE_PID_NAMESPACES" "false"
else
    info "Leaving SINGULARITY_DISABLE_PID_NAMESPACES at default"
fi

advertise "OSG_USING_JOB_HOOK" "true" "C"

###########################################################
# Add prepare hook to do the OSPool-specific transform of
# the Singularity container outside of the glidein default
# image.
glidein_group_dir=$(gconfig_get GLIDECLIENT_GROUP_WORK_DIR)
glidein_client_dir=$(gconfig_get GLIDECLIENT_WORK_DIR)
cp -ns $glidein_client_dir/*prepare-hook* $glidein_group_dir/ 2>/dev/null && \
    info "Linking hook(s) from $(ls $glidein_client_dir/*prepare-hook* | tr '\n' ' ')"
for search_path in $glidein_group_dir/{prepare-hook,itb-prepare-hook,itb-prepare-hook-lib}; do
    if [[ -e $search_path ]]; then
        hook_path=$search_path
    fi
done
chmod +x "$hook_path"
if [[ ! -e $hook_path ]]; then  # should not happen
    warn "job hook not found"
    gconfig_add "HAS_SINGULARITY" "false"
    advertise "SINGULARITY_COMMENT" "Disabled due to missing job hook" "S"
    advertise "OSG_USING_JOB_HOOK" "false" "C"
else
    set_condor_knob "OSPOOL_HOOK_PREPARE_JOB" "$hook_path"
    set_condor_knob "STARTER_JOB_HOOK_KEYWORD" "OSPOOL"
    set_condor_knob "OSPOOL_HOOK_PREPARE_JOB_TIMEOUT" "900"
fi


# Miscellaneous debugging if any
[[ $DEBUG ]] && advertise "DEBUG" "$DEBUG" "S"

###########################################################

echo "All done (osgvo-additional-htcondor-config)"

